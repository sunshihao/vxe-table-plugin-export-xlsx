"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VXETablePluginExportXLSX = void 0;
var _xeUtils = _interopRequireDefault(require("xe-utils/methods/xe-utils"));
var _xlsx = _interopRequireDefault(require("xlsx"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
/* eslint-disable no-unused-vars */

/* eslint-enable no-unused-vars */
var _vxetable;
function getCellLabel(column, cellValue) {
  if (cellValue) {
    switch (column.cellType) {
      case 'string':
        return _xeUtils["default"].toString(cellValue);
      case 'number':
        if (!isNaN(cellValue)) {
          return Number(cellValue);
        }
        break;
      default:
        if (cellValue.length < 12 && !isNaN(cellValue)) {
          return Number(cellValue);
        }
        break;
    }
  }
  return cellValue;
}
function getFooterCellValue($table, opts, rows, column) {
  var cellValue = _xeUtils["default"].toString(rows[$table.$getColumnIndex(column)]);
  return cellValue;
}
function toBuffer(wbout) {
  var buf = new ArrayBuffer(wbout.length);
  var view = new Uint8Array(buf);
  for (var index = 0; index !== wbout.length; ++index) {
    view[index] = wbout.charCodeAt(index) & 0xFF;
  }
  return buf;
}
function exportXLSX(params) {
  var $table = params.$table,
    options = params.options,
    columns = params.columns,
    datas = params.datas;
  var sheetName = options.sheetName,
    isHeader = options.isHeader,
    isFooter = options.isFooter,
    original = options.original,
    message = options.message,
    footerFilterMethod = options.footerFilterMethod;
  var colHead = {};
  var footList = [];
  // const rowList = datas
  if (isHeader) {
    columns.forEach(function (column) {
      colHead[column.id] = _xeUtils["default"].toString(original ? column.property : column.getTitle());
    });
  }
  // 新增部分
  var rowList = datas.map(function (item) {
    var rest = {};
    columns.forEach(function (column) {
      rest[column.id] = getCellLabel(column, item[column.id]);
    });
    return rest;
  });
  if (isFooter) {
    var _$table$getTableData = $table.getTableData(),
      footerData = _$table$getTableData.footerData;
    var footers = footerFilterMethod ? footerData.filter(footerFilterMethod) : footerData;
    footers.forEach(function (rows) {
      var item = {};
      columns.forEach(function (column) {
        item[column.id] = getFooterCellValue($table, options, rows, column);
      });
      footList.push(item);
    });
  }
  var book = _xlsx["default"].utils.book_new();
  var sheet = _xlsx["default"].utils.json_to_sheet((isHeader ? [colHead] : []).concat(rowList).concat(footList), {
    skipHeader: true
  });
  // 转换数据
  _xlsx["default"].utils.book_append_sheet(book, sheet, sheetName);
  var wbout = _xlsx["default"].write(book, {
    bookType: 'xlsx',
    bookSST: false,
    type: 'binary'
  });
  var blob = new Blob([toBuffer(wbout)], {
    type: 'application/octet-stream'
  });
  // 保存导出
  downloadFile(blob, options);
  if (message !== false) {
    _vxetable.modal.message({
      message: _vxetable.t('vxe.table.expSuccess'),
      status: 'success'
    });
  }
}
function downloadFile(blob, options) {
  if (window.Blob) {
    var filename = options.filename,
      type = options.type;
    if (navigator.msSaveBlob) {
      navigator.msSaveBlob(blob, "".concat(filename, ".").concat(type));
    } else {
      var linkElem = document.createElement('a');
      linkElem.target = '_blank';
      linkElem.download = "".concat(filename, ".").concat(type);
      linkElem.href = URL.createObjectURL(blob);
      document.body.appendChild(linkElem);
      linkElem.click();
      document.body.removeChild(linkElem);
    }
  } else {
    console.error(_vxetable.t('vxe.error.notExp'));
  }
}
function replaceDoubleQuotation(val) {
  return val.replace(/^"/, '').replace(/"$/, '');
}
function parseCsv(columns, content) {
  var list = content.split('\n');
  var fields = [];
  var rows = [];
  if (list.length) {
    var rList = list.slice(1);
    list[0].split(',').map(replaceDoubleQuotation);
    rList.forEach(function (r) {
      if (r) {
        var item = {};
        r.split(',').forEach(function (val, colIndex) {
          if (fields[colIndex]) {
            item[fields[colIndex]] = replaceDoubleQuotation(val);
          }
        });
        rows.push(item);
      }
    });
  }
  return {
    fields: fields,
    rows: rows
  };
}
function checkImportData(columns, fields, rows) {
  var tableFields = [];
  columns.forEach(function (column) {
    var field = column.property;
    if (field) {
      tableFields.push(field);
    }
  });
  return tableFields.every(function (field) {
    return fields.includes(field);
  });
}
function importXLSX(params) {
  var columns = params.columns,
    options = params.options,
    file = params.file;
  var $table = params.$table;
  var _importResolve = $table._importResolve;
  var fileReader = new FileReader();
  fileReader.onload = function (e) {
    var workbook = _xlsx["default"].read(e.target.result, {
      type: 'binary'
    });
    var csvData = _xlsx["default"].utils.sheet_to_csv(workbook.Sheets.Sheet1);
    var _parseCsv = parseCsv(columns, csvData),
      fields = _parseCsv.fields,
      rows = _parseCsv.rows;
    var status = checkImportData(columns, fields, rows);
    if (status) {
      $table.createData(rows).then(function (data) {
        if (options.mode === 'append') {
          $table.insertAt(data, -1);
        } else {
          $table.reloadData(data);
        }
      });
      if (options.message !== false) {
        _vxetable.modal.message({
          message: _xeUtils["default"].template(_vxetable.t('vxe.table.impSuccess'), [rows.length]),
          status: 'success'
        });
      }
    } else if (options.message !== false) {
      _vxetable.modal.message({
        message: _vxetable.t('vxe.error.impFields'),
        status: 'error'
      });
    }
    if (_importResolve) {
      _importResolve(status);
      $table._importResolve = null;
    }
  };
  fileReader.readAsBinaryString(file);
}
function handleImportEvent(params) {
  if (params.options.type === 'xlsx') {
    importXLSX(params);
    return false;
  }
}
function handleExportEvent(params) {
  if (params.options.type === 'xlsx') {
    exportXLSX(params);
    return false;
  }
}
/**
 * 基于 vxe-table 表格的增强插件，支持导出 xlsx 格式
 */
var VXETablePluginExportXLSX = {
  install: function install(xtable) {
    var interceptor = xtable.interceptor;
    _vxetable = xtable;
    Object.assign(xtable.types, {
      xlsx: 1
    });
    interceptor.mixin({
      'event.import': handleImportEvent,
      'event.export': handleExportEvent
    });
  }
};
exports.VXETablePluginExportXLSX = VXETablePluginExportXLSX;
if (typeof window !== 'undefined' && window.VXETable) {
  window.VXETable.use(VXETablePluginExportXLSX);
}
var _default = VXETablePluginExportXLSX;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
